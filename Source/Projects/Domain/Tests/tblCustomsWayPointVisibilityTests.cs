// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS4_ECompliance.BO;
using DSS4_ECompliance.BoTesting.Tests.Common;
using DSS4_ECompliance.DAL;

namespace DSS4_ECompliance.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for tblCustomsWayPointVisibilityTest and is intended
    ///to contain all tblCustomsWayPointVisibilityTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("tblCustomsWayPointVisibility Repository Tests")]
    [Category("tblCustomsWayPointVisibility Repository Tests")]
    internal class tblCustomsWayPointVisibilityTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `tblCustomsWayPointVisibility`")]
        [Order(0)]
        public void tblCustomsWayPointVisibility_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _conexbo_tblcustomswaypoint_tblcustomswaypointvisibility = new DSS4_ECompliance.BO.tblCustomsWayPoint
            {
                Waypoint = "tblCustomsWayPoint_Waypoint",
                DateTime = now,
                Location = "tblCustomsWayPoint_Location",
                VesselName = "tblCustomsWayPoint_VesselName",
                ShippingAgent = "tblCustomsWayPoint_ShippingAgent",
                TotalConsignments = 4658,
                DirectConsignments = 4684,
                TranshipmentConsignments = 3918,
                TotalEquipments = 6450,
                FullEquipments = 9224,
                EmptyEquipments = 7943,
                TEUSEquipments = 2049,
                RiskDetection = 8625,
                From = "tblCustomsWayPoint_From",
                To = "tblCustomsWayPoint_To",
                TotalRisks = 7274,
                ConveyanceID = "tblCustomsWayPoint_ConveyanceID",
                ConveyanceRef = "tblCustomsWayPoint_ConveyanceRef",
            };
            new PersistenceSpecification<DSS4_ECompliance.BO.tblCustomsWayPointVisibility>(Session)
            .CheckProperty(p => p.Waypoint, "tblCustomsWayPointVisibility_Waypoint")
            .CheckProperty(p => p.From, "tblCustomsWayPointVisibility_From")
            .CheckProperty(p => p.To, "tblCustomsWayPointVisibility_To")
            .CheckProperty(p => p.ConveyanceId, "tblCustomsWayPointVisibility_ConveyanceId")
            .CheckProperty(p => p.ConveyanceRef, "tblCustomsWayPointVisibility_ConveyanceRef")
            .CheckProperty(p => p.ShippingAgent, "tblCustomsWayPointVisibility_ShippingAgent")
            .CheckProperty(p => p.TotalConsignments, 1493)
            .CheckProperty(p => p.DirectConsignments, 915)
            .CheckProperty(p => p.TransshipmentConsignments, 8761)
            .CheckProperty(p => p.TotalCargos, 6025)
            .CheckProperty(p => p.FullCargos, 3970)
            .CheckProperty(p => p.EmptyCargos, 7495)
            .CheckProperty(p => p.TotalRiskDetected, 2526)
            .CheckProperty(p => p.Consignment, "tblCustomsWayPointVisibility_Consignment")
            .CheckProperty(p => p.CargoId, "tblCustomsWayPointVisibility_CargoId")
            .CheckProperty(p => p.RiskType, "tblCustomsWayPointVisibility_RiskType")
            .CheckProperty(p => p.RiskScore, 3676)
            .CheckProperty(p => p.Severity, "tblCustomsWayPointVisibility_Severity")
            .CheckProperty(p => p.Details, "tblCustomsWayPointVisibility_Details")
            .CheckProperty(p => p.Suggestions, "tblCustomsWayPointVisibility_Suggestions")
            .CheckReference(p => p.tblCustomsWayPoint, _conexbo_tblcustomswaypoint_tblcustomswaypointvisibility)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `tblCustomsWayPointVisibility`")]
        [Order(1)]
        public void tblCustomsWayPointVisibility_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS4_ECompliance.BO.tblCustomsWayPointVisibility> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS4_ECompliance.BO.tblCustomsWayPointVisibility>(
                              a => true
                              && (a.Waypoint != string.Empty && a.Waypoint != null)
                              && (a.From != string.Empty && a.From != null)
                              && (a.To != string.Empty && a.To != null)
                              && (a.ConveyanceId != string.Empty && a.ConveyanceId != null)
                              && (a.ConveyanceRef != string.Empty && a.ConveyanceRef != null)
                              && (a.ShippingAgent != string.Empty && a.ShippingAgent != null)
                              && (a.TotalConsignments + 123 > 0)
                              && (a.DirectConsignments + 123 > 0)
                              && (a.TransshipmentConsignments + 123 > 0)
                              && (a.TotalCargos + 123 > 0)
                              && (a.FullCargos + 123 > 0)
                              && (a.EmptyCargos + 123 > 0)
                              && (a.TotalRiskDetected + 123 > 0)
                              && (a.Consignment != string.Empty && a.Consignment != null)
                              && (a.CargoId != string.Empty && a.CargoId != null)
                              && (a.RiskType != string.Empty && a.RiskType != null)
                              && (a.RiskScore + 123 > 0)
                              && (a.Severity != string.Empty && a.Severity != null)
                              && (a.Details != string.Empty && a.Details != null)
                              && (a.Suggestions != string.Empty && a.Suggestions != null)
                              && a.tblCustomsWayPoint != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}