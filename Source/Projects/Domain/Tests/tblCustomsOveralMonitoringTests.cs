// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS4_ECompliance.BO;
using DSS4_ECompliance.BoTesting.Tests.Common;
using DSS4_ECompliance.DAL;

namespace DSS4_ECompliance.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for tblCustomsOveralMonitoringTest and is intended
    ///to contain all tblCustomsOveralMonitoringTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("tblCustomsOveralMonitoring Repository Tests")]
    [Category("tblCustomsOveralMonitoring Repository Tests")]
    internal class tblCustomsOveralMonitoringTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `tblCustomsOveralMonitoring`")]
        [Order(0)]
        public void tblCustomsOveralMonitoring_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _conexbo_tblcustomsfinder_tblcustomsoveralmonitoring = new DSS4_ECompliance.BO.tblCustomsFinder
            {
                RiskAnalysys = 5636,
                RisksDetected = 9514,
                CrossBorders = 3133,
                Delays = 3606,
            };
            new PersistenceSpecification<DSS4_ECompliance.BO.tblCustomsOveralMonitoring>(Session)
            .CheckProperty(p => p.Waypoint, "tblCustomsOveralMonitoring_Waypoint")
            .CheckProperty(p => p.DateTime, now)
            .CheckProperty(p => p.Location, "tblCustomsOveralMonitoring_Location")
            .CheckProperty(p => p.VesselName, "tblCustomsOveralMonitoring_VesselName")
            .CheckProperty(p => p.ShippingAgent, "tblCustomsOveralMonitoring_ShippingAgent")
            .CheckProperty(p => p.TotalConsignments, 1669)
            .CheckProperty(p => p.DirectConsignments, 5743)
            .CheckProperty(p => p.TranshipmentConsignments, 4736)
            .CheckProperty(p => p.TotalEquipements, 3728)
            .CheckProperty(p => p.FullEquipements, 4149)
            .CheckProperty(p => p.EmptyEquipements, 6293)
            .CheckProperty(p => p.TEUSEquipements, 1917)
            .CheckProperty(p => p.RiskDetection, 9956)
            .CheckReference(p => p.tblCustomsFinder, _conexbo_tblcustomsfinder_tblcustomsoveralmonitoring)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `tblCustomsOveralMonitoring`")]
        [Order(1)]
        public void tblCustomsOveralMonitoring_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS4_ECompliance.BO.tblCustomsOveralMonitoring> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS4_ECompliance.BO.tblCustomsOveralMonitoring>(
                              a => true
                              && (a.Waypoint != string.Empty && a.Waypoint != null)
                              && a.DateTime.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && (a.Location != string.Empty && a.Location != null)
                              && (a.VesselName != string.Empty && a.VesselName != null)
                              && (a.ShippingAgent != string.Empty && a.ShippingAgent != null)
                              && (a.TotalConsignments + 123 > 0)
                              && (a.DirectConsignments + 123 > 0)
                              && (a.TranshipmentConsignments + 123 > 0)
                              && (a.TotalEquipements + 123 > 0)
                              && (a.FullEquipements + 123 > 0)
                              && (a.EmptyEquipements + 123 > 0)
                              && (a.TEUSEquipements + 123 > 0)
                              && (a.RiskDetection + 123 > 0)
                              && a.tblCustomsFinder != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}