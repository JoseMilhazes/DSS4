// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS4_ECompliance.BO;
using DSS4_ECompliance.BoTesting.Tests.Common;
using DSS4_ECompliance.DAL;

namespace DSS4_ECompliance.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for tblCustomsWayPointRiskTest and is intended
    ///to contain all tblCustomsWayPointRiskTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("tblCustomsWayPointRisk Repository Tests")]
    [Category("tblCustomsWayPointRisk Repository Tests")]
    internal class tblCustomsWayPointRiskTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `tblCustomsWayPointRisk`")]
        [Order(0)]
        public void tblCustomsWayPointRisk_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _conexbo_tblcustomswaypoint_tblcustomswaypointrisk = new DSS4_ECompliance.BO.tblCustomsWayPoint
            {
                Waypoint = "tblCustomsWayPoint_Waypoint",
                DateTime = now,
                Location = "tblCustomsWayPoint_Location",
                VesselName = "tblCustomsWayPoint_VesselName",
                ShippingAgent = "tblCustomsWayPoint_ShippingAgent",
                TotalConsignments = 5641,
                DirectConsignments = 7204,
                TranshipmentConsignments = 4315,
                TotalEquipments = 4736,
                FullEquipments = 7507,
                EmptyEquipments = 2779,
                TEUSEquipments = 3570,
                RiskDetection = 7787,
                From = "tblCustomsWayPoint_From",
                To = "tblCustomsWayPoint_To",
                TotalRisks = 4810,
                ConveyanceID = "tblCustomsWayPoint_ConveyanceID",
                ConveyanceRef = "tblCustomsWayPoint_ConveyanceRef",
            };
            new PersistenceSpecification<DSS4_ECompliance.BO.tblCustomsWayPointRisk>(Session)
            .CheckProperty(p => p.Consignment, "tblCustomsWayPointRisk_Consignment")
            .CheckProperty(p => p.CargoId, "tblCustomsWayPointRisk_CargoId")
            .CheckProperty(p => p.RiskTypeId, "tblCustomsWayPointRisk_RiskTypeId")
            .CheckProperty(p => p.RiskScore, "tblCustomsWayPointRisk_RiskScore")
            .CheckProperty(p => p.Severity, "tblCustomsWayPointRisk_Severity")
            .CheckProperty(p => p.Details, "tblCustomsWayPointRisk_Details")
            .CheckProperty(p => p.Suggestions, "tblCustomsWayPointRisk_Suggestions")
            .CheckReference(p => p.tblCustomsWayPoint, _conexbo_tblcustomswaypoint_tblcustomswaypointrisk)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `tblCustomsWayPointRisk`")]
        [Order(1)]
        public void tblCustomsWayPointRisk_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS4_ECompliance.BO.tblCustomsWayPointRisk> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS4_ECompliance.BO.tblCustomsWayPointRisk>(
                              a => true
                              && (a.Consignment != string.Empty && a.Consignment != null)
                              && (a.CargoId != string.Empty && a.CargoId != null)
                              && (a.RiskTypeId != string.Empty && a.RiskTypeId != null)
                              && (a.RiskScore != string.Empty && a.RiskScore != null)
                              && (a.Severity != string.Empty && a.Severity != null)
                              && (a.Details != string.Empty && a.Details != null)
                              && (a.Suggestions != string.Empty && a.Suggestions != null)
                              && a.tblCustomsWayPoint != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}