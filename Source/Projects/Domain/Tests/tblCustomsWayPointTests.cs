// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS4_ECompliance.BO;
using DSS4_ECompliance.BoTesting.Tests.Common;
using DSS4_ECompliance.DAL;

namespace DSS4_ECompliance.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for tblCustomsWayPointTest and is intended
    ///to contain all tblCustomsWayPointTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("tblCustomsWayPoint Repository Tests")]
    [Category("tblCustomsWayPoint Repository Tests")]
    internal class tblCustomsWayPointTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `tblCustomsWayPoint`")]
        [Order(0)]
        public void tblCustomsWayPoint_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _conexbo_customswaypoint_tblcustomswaypoint = new DSS4_ECompliance.BO.tblCustomsWayPoint
            {
                Waypoint = "tblCustomsWayPoint_Waypoint",
                DateTime = now,
                Location = "tblCustomsWayPoint_Location",
                VesselName = "tblCustomsWayPoint_VesselName",
                ShippingAgent = "tblCustomsWayPoint_ShippingAgent",
                TotalConsignments = 7057,
                DirectConsignments = 8786,
                TranshipmentConsignments = 6849,
                TotalEquipments = 5623,
                FullEquipments = 8533,
                EmptyEquipments = 7347,
                TEUSEquipments = 9434,
                RiskDetection = 12,
                From = "tblCustomsWayPoint_From",
                To = "tblCustomsWayPoint_To",
                TotalRisks = 133,
                ConveyanceID = "tblCustomsWayPoint_ConveyanceID",
                ConveyanceRef = "tblCustomsWayPoint_ConveyanceRef",
            };
            new PersistenceSpecification<DSS4_ECompliance.BO.tblCustomsWayPoint>(Session)
            .CheckProperty(p => p.Waypoint, "tblCustomsWayPoint_Waypoint")
            .CheckProperty(p => p.DateTime, now)
            .CheckProperty(p => p.Location, "tblCustomsWayPoint_Location")
            .CheckProperty(p => p.VesselName, "tblCustomsWayPoint_VesselName")
            .CheckProperty(p => p.ShippingAgent, "tblCustomsWayPoint_ShippingAgent")
            .CheckProperty(p => p.TotalConsignments, 304)
            .CheckProperty(p => p.DirectConsignments, 1066)
            .CheckProperty(p => p.TranshipmentConsignments, 876)
            .CheckProperty(p => p.TotalEquipments, 9947)
            .CheckProperty(p => p.FullEquipments, 3419)
            .CheckProperty(p => p.EmptyEquipments, 1108)
            .CheckProperty(p => p.TEUSEquipments, 9620)
            .CheckProperty(p => p.RiskDetection, 2725)
            .CheckProperty(p => p.From, "tblCustomsWayPoint_From")
            .CheckProperty(p => p.To, "tblCustomsWayPoint_To")
            .CheckProperty(p => p.TotalRisks, 979)
            .CheckProperty(p => p.ConveyanceID, "tblCustomsWayPoint_ConveyanceID")
            .CheckProperty(p => p.ConveyanceRef, "tblCustomsWayPoint_ConveyanceRef")
            .CheckReference(p => p.CustomsWayPoint, _conexbo_customswaypoint_tblcustomswaypoint)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `tblCustomsWayPoint`")]
        [Order(1)]
        public void tblCustomsWayPoint_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS4_ECompliance.BO.tblCustomsWayPoint> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS4_ECompliance.BO.tblCustomsWayPoint>(
                              a => true
                              && (a.Waypoint != string.Empty && a.Waypoint != null)
                              && a.DateTime.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && (a.Location != string.Empty && a.Location != null)
                              && (a.VesselName != string.Empty && a.VesselName != null)
                              && (a.ShippingAgent != string.Empty && a.ShippingAgent != null)
                              && (a.TotalConsignments + 123 > 0)
                              && (a.DirectConsignments + 123 > 0)
                              && (a.TranshipmentConsignments + 123 > 0)
                              && (a.TotalEquipments + 123 > 0)
                              && (a.FullEquipments + 123 > 0)
                              && (a.EmptyEquipments + 123 > 0)
                              && (a.TEUSEquipments + 123 > 0)
                              && (a.RiskDetection + 123 > 0)
                              && (a.From != string.Empty && a.From != null)
                              && (a.To != string.Empty && a.To != null)
                              && (a.TotalRisks + 123 > 0)
                              && (a.ConveyanceID != string.Empty && a.ConveyanceID != null)
                              && (a.ConveyanceRef != string.Empty && a.ConveyanceRef != null)
                              && a.CustomsWayPoint != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}