// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
namespace DSS4_ECompliance.BO {
export class Domain_LocalResourcesDefinition  {
    _originalTypeClassName = "DSS4_ECompliance.BO.Domain_LocalResourcesDefinition";
    Domain = DSS4_ECompliance.BO;
    constructor() {
    }
}

export class tblCustomsFinder  {
    _originalTypeClassName = "DSS4_ECompliance.BO.tblCustomsFinder";
    Domain = DSS4_ECompliance.BO;
    constructor() {
        this['_key'] = this.FinderID = 0;
    }
FinderID:
    any;
RiskAnalysys:
    any;
RisksDetected:
    any;
CrossBorders:
    any;
Delays:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.FinderID == null || $this.FinderID == 0;
    }
}

export class tblCustomsOveralMonitoring  {
    _originalTypeClassName = "DSS4_ECompliance.BO.tblCustomsOveralMonitoring";
    Domain = DSS4_ECompliance.BO;
    constructor() {
        this['_key'] = this.MonitoringID = 0;
    }
MonitoringID:
    any;
Waypoint:
    any;
DateTime:
    any;
Location:
    any;
VesselName:
    any;
ShippingAgent:
    any;
TotalConsignments:
    any;
DirectConsignments:
    any;
TranshipmentConsignments:
    any;
TotalEquipements:
    any;
FullEquipements:
    any;
EmptyEquipements:
    any;
TEUSEquipements:
    any;
RiskDetection:
    any;
tblCustomsFinder:
    any;
    static settblCustomsFinder = ($this, value) => {
        var oldValue = $this.tblCustomsFinder;
        $this.tblCustomsFinder = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.MonitoringID == null || $this.MonitoringID == 0;
    }
}

export class tblCustomsWayPointRisk  {
    _originalTypeClassName = "DSS4_ECompliance.BO.tblCustomsWayPointRisk";
    Domain = DSS4_ECompliance.BO;
    constructor() {
        this['_key'] = this.WaypointriskID = 0;
    }
WaypointriskID:
    any;
Consignment:
    any;
CargoId:
    any;
RiskTypeId:
    any;
RiskScore:
    any;
Severity:
    any;
Details:
    any;
Suggestions:
    any;
tblCustomsWayPoint:
    any;
    static settblCustomsWayPoint = ($this, value) => {
        var oldValue = $this.tblCustomsWayPoint;
        $this.tblCustomsWayPoint = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.WaypointriskID == null || $this.WaypointriskID == 0;
    }
}

export class tblCustomsWayPointVisibility  {
    _originalTypeClassName = "DSS4_ECompliance.BO.tblCustomsWayPointVisibility";
    Domain = DSS4_ECompliance.BO;
    constructor() {
        this['_key'] = this.WayPointVisibilityID = 0;
    }
WayPointVisibilityID:
    any;
Waypoint:
    any;
From:
    any;
To:
    any;
ConveyanceId:
    any;
ConveyanceRef:
    any;
ShippingAgent:
    any;
TotalConsignments:
    any;
DirectConsignments:
    any;
TransshipmentConsignments:
    any;
TotalCargos:
    any;
FullCargos:
    any;
EmptyCargos:
    any;
TotalRiskDetected:
    any;
Consignment:
    any;
CargoId:
    any;
RiskType:
    any;
RiskScore:
    any;
Severity:
    any;
Details:
    any;
Suggestions:
    any;
tblCustomsWayPoint:
    any;
    static settblCustomsWayPoint = ($this, value) => {
        var oldValue = $this.tblCustomsWayPoint;
        $this.tblCustomsWayPoint = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.WayPointVisibilityID == null || $this.WayPointVisibilityID == 0;
    }
}

export class tblCustomsWayPoint  {
    _originalTypeClassName = "DSS4_ECompliance.BO.tblCustomsWayPoint";
    Domain = DSS4_ECompliance.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Waypoint:
    any;
DateTime:
    any;
Location:
    any;
VesselName:
    any;
ShippingAgent:
    any;
TotalConsignments:
    any;
DirectConsignments:
    any;
TranshipmentConsignments:
    any;
TotalEquipments:
    any;
FullEquipments:
    any;
EmptyEquipments:
    any;
TEUSEquipments:
    any;
RiskDetection:
    any;
From:
    any;
To:
    any;
TotalRisks:
    any;
ConveyanceID:
    any;
ConveyanceRef:
    any;
CustomsWayPoint:
    any;
    static setCustomsWayPoint = ($this, value) => {
        var oldValue = $this.CustomsWayPoint;
        $this.CustomsWayPoint = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationUserAction  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserAction";
    Domain = DSS4_ECompliance.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
UserName:
    any;
ActiveRoles:
    any;
ActivePermissions:
    any;
Action:
    any;
Controller:
    any;
Date:
    any;
ErrorMessage:
    any;
Success:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationUserExternalProfile  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserExternalProfile";
    Domain = DSS4_ECompliance.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Gender:
    any;
Name:
    any;
Surname:
    any;
DisplayName:
    any;
Email:
    any;
Provider:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationSetting  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationSetting";
    Domain = DSS4_ECompliance.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Key:
    any;
Value:
    any;
IsCustom:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationUser  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUser";
    Domain = DSS4_ECompliance.BO;
    constructor() {
        this.Permissions = [];
        this.Roles = [];
        this.Clients = [];
        this.Logins = [];
        this.Claims = [];
        this['_key'] = this.UserName = "";
    }
UserName:
    any;
PasswordHash:
    any;
SecurityStamp:
    any;
EmailConfirmed:
    any;
LockoutEnabled:
    any;
PhoneNumberConfirmed:
    any;
TwoFactorEnabled:
    any;
AccessFailedCount:
    any;
Name:
    any;
Email:
    any;
PhoneNumber:
    any;
LockoutEndDate:
    any;
Permissions:
    any;
Roles:
    any;
Clients:
    any;
Logins:
    any;
Claims:
    any;
Profile:
    any;
    static setPermissions = ($this, items) => {
        if (items == null) items = [];
        if ($this.Permissions == null) $this.Permissions = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Permissions.length > 0) {
            DSS4_ECompliance.BO.ApplicationUser.removePermissions($this, $this.Permissions[0]);
        }

        DSS4_ECompliance.BO.ApplicationUser.addManyPermissions($this, copyItems);
    }
    static addManyPermissions = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS4_ECompliance.BO.ApplicationUser.addPermissions($this, items[i]);
        }
    }
    static addPermissions = ($this, item) => {
        if ($this.Permissions == null) $this.Permissions = [];
        if (item == null || $this.Permissions.indexOf(item) > -1) return;
        $this.Permissions.push(item);
        ApplicationPermission.addUsers(item, $this);
    }
    static addRangePermissions = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS4_ECompliance.BO.ApplicationUser.addPermissions($this, item));
    }
    static removePermissions = ($this, item) => {
        if ($this == null || $this.Permissions == null || $this.Permissions.indexOf(item) === -1) return;
        var _index = $this.Permissions.indexOf(item);
        $this.Permissions.splice(_index, 1);
        ApplicationPermission.removeUsers(item, $this);
    }
    static clearPermissions = ($this) => {
        $this.Permissions = null;
    }
    static setRoles = ($this, items) => {
        if (items == null) items = [];
        if ($this.Roles == null) $this.Roles = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Roles.length > 0) {
            DSS4_ECompliance.BO.ApplicationUser.removeRoles($this, $this.Roles[0]);
        }

        DSS4_ECompliance.BO.ApplicationUser.addManyRoles($this, copyItems);
    }
    static addManyRoles = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS4_ECompliance.BO.ApplicationUser.addRoles($this, items[i]);
        }
    }
    static addRoles = ($this, item) => {
        if ($this.Roles == null) $this.Roles = [];
        if (item == null || $this.Roles.indexOf(item) > -1) return;
        $this.Roles.push(item);
        ApplicationRole.addUsers(item, $this);
    }
    static addRangeRoles = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS4_ECompliance.BO.ApplicationUser.addRoles($this, item));
    }
    static removeRoles = ($this, item) => {
        if ($this == null || $this.Roles == null || $this.Roles.indexOf(item) === -1) return;
        var _index = $this.Roles.indexOf(item);
        $this.Roles.splice(_index, 1);
        ApplicationRole.removeUsers(item, $this);
    }
    static clearRoles = ($this) => {
        $this.Roles = null;
    }
    static setClients = ($this, items) => {
        if (items == null) items = [];
        if ($this.Clients == null) $this.Clients = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Clients.length > 0) {
            DSS4_ECompliance.BO.ApplicationUser.removeClients($this, $this.Clients[0]);
        }

        DSS4_ECompliance.BO.ApplicationUser.addManyClients($this, copyItems);
    }
    static addManyClients = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS4_ECompliance.BO.ApplicationUser.addClients($this, items[i]);
        }
    }
    static addClients = ($this, item) => {
        if ($this.Clients == null) $this.Clients = [];
        if (item == null || $this.Clients.indexOf(item) > -1) return;
        $this.Clients.push(item);
        if (item.User != $this) {
            DSS4_ECompliance.BO.ApplicationClient.setUser(item, $this);
        }
    }
    static addRangeClients = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS4_ECompliance.BO.ApplicationUser.addClients($this, item));
    }
    static removeClients = ($this, item) => {
        if ($this == null || $this.Clients == null || $this.Clients.indexOf(item) === -1) return;
        var _index = $this.Clients.indexOf(item);
        $this.Clients.splice(_index, 1);
        item.User = null;
    }
    static clearClients = ($this) => {
        $this.Clients = null;
    }
    static setLogins = ($this, items) => {
        if (items == null) items = [];
        if ($this.Logins == null) $this.Logins = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Logins.length > 0) {
            DSS4_ECompliance.BO.ApplicationUser.removeLogins($this, $this.Logins[0]);
        }

        DSS4_ECompliance.BO.ApplicationUser.addManyLogins($this, copyItems);
    }
    static addManyLogins = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS4_ECompliance.BO.ApplicationUser.addLogins($this, items[i]);
        }
    }
    static addLogins = ($this, item) => {
        if ($this.Logins == null) $this.Logins = [];
        if (item == null || $this.Logins.indexOf(item) > -1) return;
        $this.Logins.push(item);
        if (item.User != $this) {
            DSS4_ECompliance.BO.ApplicationUserLogin.setUser(item, $this);
        }
    }
    static addRangeLogins = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS4_ECompliance.BO.ApplicationUser.addLogins($this, item));
    }
    static removeLogins = ($this, item) => {
        if ($this == null || $this.Logins == null || $this.Logins.indexOf(item) === -1) return;
        var _index = $this.Logins.indexOf(item);
        $this.Logins.splice(_index, 1);
        item.User = null;
    }
    static clearLogins = ($this) => {
        $this.Logins = null;
    }
    static setClaims = ($this, items) => {
        if (items == null) items = [];
        if ($this.Claims == null) $this.Claims = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Claims.length > 0) {
            DSS4_ECompliance.BO.ApplicationUser.removeClaims($this, $this.Claims[0]);
        }

        DSS4_ECompliance.BO.ApplicationUser.addManyClaims($this, copyItems);
    }
    static addManyClaims = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS4_ECompliance.BO.ApplicationUser.addClaims($this, items[i]);
        }
    }
    static addClaims = ($this, item) => {
        if ($this.Claims == null) $this.Claims = [];
        if (item == null || $this.Claims.indexOf(item) > -1) return;
        $this.Claims.push(item);
        if (item.User != $this) {
            DSS4_ECompliance.BO.ApplicationUserClaim.setUser(item, $this);
        }
    }
    static addRangeClaims = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS4_ECompliance.BO.ApplicationUser.addClaims($this, item));
    }
    static removeClaims = ($this, item) => {
        if ($this == null || $this.Claims == null || $this.Claims.indexOf(item) === -1) return;
        var _index = $this.Claims.indexOf(item);
        $this.Claims.splice(_index, 1);
        item.User = null;
    }
    static clearClaims = ($this) => {
        $this.Claims = null;
    }
    static setProfile = ($this, value) => {
        var oldValue = $this.Profile;
        $this.Profile = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.UserName == null || $this.UserName == "";
    }
}

export class ApplicationRole  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationRole";
    Domain = DSS4_ECompliance.BO;
    constructor() {
        this.Users = [];
        this.Permissions = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
Description:
    any;
IsCustom:
    any;
Users:
    any;
Permissions:
    any;
    static setUsers = ($this, items) => {
        if (items == null) items = [];
        if ($this.Users == null) $this.Users = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Users.length > 0) {
            DSS4_ECompliance.BO.ApplicationRole.removeUsers($this, $this.Users[0]);
        }

        DSS4_ECompliance.BO.ApplicationRole.addManyUsers($this, copyItems);
    }
    static addManyUsers = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS4_ECompliance.BO.ApplicationRole.addUsers($this, items[i]);
        }
    }
    static addUsers = ($this, item) => {
        if ($this.Users == null) $this.Users = [];
        if (item == null || $this.Users.indexOf(item) > -1) return;
        $this.Users.push(item);
        ApplicationUser.addRoles(item, $this);
    }
    static addRangeUsers = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS4_ECompliance.BO.ApplicationRole.addUsers($this, item));
    }
    static removeUsers = ($this, item) => {
        if ($this == null || $this.Users == null || $this.Users.indexOf(item) === -1) return;
        var _index = $this.Users.indexOf(item);
        $this.Users.splice(_index, 1);
        ApplicationUser.removeRoles(item, $this);
    }
    static clearUsers = ($this) => {
        $this.Users = null;
    }
    static setPermissions = ($this, items) => {
        if (items == null) items = [];
        if ($this.Permissions == null) $this.Permissions = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Permissions.length > 0) {
            DSS4_ECompliance.BO.ApplicationRole.removePermissions($this, $this.Permissions[0]);
        }

        DSS4_ECompliance.BO.ApplicationRole.addManyPermissions($this, copyItems);
    }
    static addManyPermissions = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS4_ECompliance.BO.ApplicationRole.addPermissions($this, items[i]);
        }
    }
    static addPermissions = ($this, item) => {
        if ($this.Permissions == null) $this.Permissions = [];
        if (item == null || $this.Permissions.indexOf(item) > -1) return;
        $this.Permissions.push(item);
        ApplicationPermission.addRoles(item, $this);
    }
    static addRangePermissions = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS4_ECompliance.BO.ApplicationRole.addPermissions($this, item));
    }
    static removePermissions = ($this, item) => {
        if ($this == null || $this.Permissions == null || $this.Permissions.indexOf(item) === -1) return;
        var _index = $this.Permissions.indexOf(item);
        $this.Permissions.splice(_index, 1);
        ApplicationPermission.removeRoles(item, $this);
    }
    static clearPermissions = ($this) => {
        $this.Permissions = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationOperation  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationOperation";
    Domain = DSS4_ECompliance.BO;
    constructor() {
        this.Permissions = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
ParentControllerName:
    any;
Type:
    any;
IsAvailableToAnonymous:
    any;
IsAvailableToAllAuthorizedUsers:
    any;
Permissions:
    any;
    static setPermissions = ($this, items) => {
        if (items == null) items = [];
        if ($this.Permissions == null) $this.Permissions = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Permissions.length > 0) {
            DSS4_ECompliance.BO.ApplicationOperation.removePermissions($this, $this.Permissions[0]);
        }

        DSS4_ECompliance.BO.ApplicationOperation.addManyPermissions($this, copyItems);
    }
    static addManyPermissions = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS4_ECompliance.BO.ApplicationOperation.addPermissions($this, items[i]);
        }
    }
    static addPermissions = ($this, item) => {
        if ($this.Permissions == null) $this.Permissions = [];
        if (item == null || $this.Permissions.indexOf(item) > -1) return;
        $this.Permissions.push(item);
        ApplicationPermission.addOperations(item, $this);
    }
    static addRangePermissions = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS4_ECompliance.BO.ApplicationOperation.addPermissions($this, item));
    }
    static removePermissions = ($this, item) => {
        if ($this == null || $this.Permissions == null || $this.Permissions.indexOf(item) === -1) return;
        var _index = $this.Permissions.indexOf(item);
        $this.Permissions.splice(_index, 1);
        ApplicationPermission.removeOperations(item, $this);
    }
    static clearPermissions = ($this) => {
        $this.Permissions = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationPermission  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission";
    Domain = DSS4_ECompliance.BO;
    constructor() {
        this.Users = [];
        this.Roles = [];
        this.Operations = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
Description:
    any;
IsCustom:
    any;
Users:
    any;
Roles:
    any;
Operations:
    any;
    static setUsers = ($this, items) => {
        if (items == null) items = [];
        if ($this.Users == null) $this.Users = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Users.length > 0) {
            DSS4_ECompliance.BO.ApplicationPermission.removeUsers($this, $this.Users[0]);
        }

        DSS4_ECompliance.BO.ApplicationPermission.addManyUsers($this, copyItems);
    }
    static addManyUsers = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS4_ECompliance.BO.ApplicationPermission.addUsers($this, items[i]);
        }
    }
    static addUsers = ($this, item) => {
        if ($this.Users == null) $this.Users = [];
        if (item == null || $this.Users.indexOf(item) > -1) return;
        $this.Users.push(item);
        ApplicationUser.addPermissions(item, $this);
    }
    static addRangeUsers = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS4_ECompliance.BO.ApplicationPermission.addUsers($this, item));
    }
    static removeUsers = ($this, item) => {
        if ($this == null || $this.Users == null || $this.Users.indexOf(item) === -1) return;
        var _index = $this.Users.indexOf(item);
        $this.Users.splice(_index, 1);
        ApplicationUser.removePermissions(item, $this);
    }
    static clearUsers = ($this) => {
        $this.Users = null;
    }
    static setRoles = ($this, items) => {
        if (items == null) items = [];
        if ($this.Roles == null) $this.Roles = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Roles.length > 0) {
            DSS4_ECompliance.BO.ApplicationPermission.removeRoles($this, $this.Roles[0]);
        }

        DSS4_ECompliance.BO.ApplicationPermission.addManyRoles($this, copyItems);
    }
    static addManyRoles = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS4_ECompliance.BO.ApplicationPermission.addRoles($this, items[i]);
        }
    }
    static addRoles = ($this, item) => {
        if ($this.Roles == null) $this.Roles = [];
        if (item == null || $this.Roles.indexOf(item) > -1) return;
        $this.Roles.push(item);
        ApplicationRole.addPermissions(item, $this);
    }
    static addRangeRoles = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS4_ECompliance.BO.ApplicationPermission.addRoles($this, item));
    }
    static removeRoles = ($this, item) => {
        if ($this == null || $this.Roles == null || $this.Roles.indexOf(item) === -1) return;
        var _index = $this.Roles.indexOf(item);
        $this.Roles.splice(_index, 1);
        ApplicationRole.removePermissions(item, $this);
    }
    static clearRoles = ($this) => {
        $this.Roles = null;
    }
    static setOperations = ($this, items) => {
        if (items == null) items = [];
        if ($this.Operations == null) $this.Operations = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Operations.length > 0) {
            DSS4_ECompliance.BO.ApplicationPermission.removeOperations($this, $this.Operations[0]);
        }

        DSS4_ECompliance.BO.ApplicationPermission.addManyOperations($this, copyItems);
    }
    static addManyOperations = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS4_ECompliance.BO.ApplicationPermission.addOperations($this, items[i]);
        }
    }
    static addOperations = ($this, item) => {
        if ($this.Operations == null) $this.Operations = [];
        if (item == null || $this.Operations.indexOf(item) > -1) return;
        $this.Operations.push(item);
        ApplicationOperation.addPermissions(item, $this);
    }
    static addRangeOperations = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS4_ECompliance.BO.ApplicationPermission.addOperations($this, item));
    }
    static removeOperations = ($this, item) => {
        if ($this == null || $this.Operations == null || $this.Operations.indexOf(item) === -1) return;
        var _index = $this.Operations.indexOf(item);
        $this.Operations.splice(_index, 1);
        ApplicationOperation.removePermissions(item, $this);
    }
    static clearOperations = ($this) => {
        $this.Operations = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationClient  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationClient";
    Domain = DSS4_ECompliance.BO;
    constructor() {
        this.User = new this.Domain.ApplicationUser();
        this['_key'] = this.Id = 0;
    }
Id:
    any;
ClientKey:
    any;
IPAddress:
    any;
SessionId:
    any;
ConnectedOn:
    any;
User:
    any;
    static setUser = ($this, value) => {
        var oldValue = $this.User;
        $this.User = value;
        if (value != null) {
            if (oldValue != null) {
                DSS4_ECompliance.BO.ApplicationUser.removeClients(oldValue, $this);
            }
            DSS4_ECompliance.BO.ApplicationUser.addClients(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationUserLogin  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserLogin";
    Domain = DSS4_ECompliance.BO;
    constructor() {
        this.User = new this.Domain.ApplicationUser();
        this['_key'] = this.Id = 0;
    }
Id:
    any;
LoginProvider:
    any;
ProviderKey:
    any;
User:
    any;
    static setUser = ($this, value) => {
        var oldValue = $this.User;
        $this.User = value;
        if (value != null) {
            if (oldValue != null) {
                DSS4_ECompliance.BO.ApplicationUser.removeLogins(oldValue, $this);
            }
            DSS4_ECompliance.BO.ApplicationUser.addLogins(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationUserClaim  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserClaim";
    Domain = DSS4_ECompliance.BO;
    constructor() {
        this.User = new this.Domain.ApplicationUser();
        this['_key'] = this.Id = 0;
    }
Id:
    any;
ClaimType:
    any;
ClaimValue:
    any;
ClaimValueType:
    any;
Issuer:
    any;
OriginalIssuer:
    any;
User:
    any;
    static setUser = ($this, value) => {
        var oldValue = $this.User;
        $this.User = value;
        if (value != null) {
            if (oldValue != null) {
                DSS4_ECompliance.BO.ApplicationUser.removeClaims(oldValue, $this);
            }
            DSS4_ECompliance.BO.ApplicationUser.addClaims(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ProfileSetting  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ProfileSetting";
    Domain = DSS4_ECompliance.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Key:
    any;
Value:
    any;
ParentProfile:
    any;
    static setParentProfile = ($this, value) => {
        var oldValue = $this.ParentProfile;
        $this.ParentProfile = value;
        if (value != null) {
            if (oldValue != null) {
                DSS4_ECompliance.BO.Profile.removeSettings(oldValue, $this);
            }
            DSS4_ECompliance.BO.Profile.addSettings(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Profile  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.Profile";
    Domain = DSS4_ECompliance.BO;
    constructor() {
        this.Settings = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
LanguageLCID:
    any;
LocaleLCID:
    any;
Theme:
    any;
Settings:
    any;
    static setSettings = ($this, items) => {
        if (items == null) items = [];
        if ($this.Settings == null) $this.Settings = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Settings.length > 0) {
            DSS4_ECompliance.BO.Profile.removeSettings($this, $this.Settings[0]);
        }

        DSS4_ECompliance.BO.Profile.addManySettings($this, copyItems);
    }
    static addManySettings = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS4_ECompliance.BO.Profile.addSettings($this, items[i]);
        }
    }
    static addSettings = ($this, item) => {
        if ($this.Settings == null) $this.Settings = [];
        if (item == null || $this.Settings.indexOf(item) > -1) return;
        $this.Settings.push(item);
        if (item.ParentProfile != $this) {
            DSS4_ECompliance.BO.ProfileSetting.setParentProfile(item, $this);
        }
    }
    static addRangeSettings = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS4_ECompliance.BO.Profile.addSettings($this, item));
    }
    static removeSettings = ($this, item) => {
        if ($this == null || $this.Settings == null || $this.Settings.indexOf(item) === -1) return;
        var _index = $this.Settings.indexOf(item);
        $this.Settings.splice(_index, 1);
        item.ParentProfile = null;
    }
    static clearSettings = ($this) => {
        $this.Settings = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationLanguage  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationLanguage";
    Domain = DSS4_ECompliance.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
Code:
    any;
Icon:
    any;
DateTimeFormat:
    any;
    static setDateTimeFormat = ($this, value) => {
        var oldValue = $this.DateTimeFormat;
        $this.DateTimeFormat = value;
        if (value != null) {
            if (oldValue != null && oldValue.ApplicationLanguage != null) {
                oldValue.ApplicationLanguage = null;
            }
            if ($this.DateTimeFormat.ApplicationLanguage !== $this) {
                DSS4_ECompliance.BO.DateTimeFormat.setApplicationLanguage(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class DateTimeFormat  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.DateTimeFormat";
    Domain = DSS4_ECompliance.BO;
    constructor() {
        this.ApplicationLanguage = new this.Domain.ApplicationLanguage();
        this['_key'] = this.Id = 0;
    }
Id:
    any;
LongDatePattern:
    any;
LongTimePattern:
    any;
MonthDayPattern:
    any;
RFC1123Pattern:
    any;
ShortDatePattern:
    any;
ShortTimePattern:
    any;
YearMonthPattern:
    any;
ApplicationLanguage:
    any;
    static setApplicationLanguage = ($this, value) => {
        var oldValue = $this.ApplicationLanguage;
        $this.ApplicationLanguage = value;
        if (value != null) {
            if (oldValue != null && oldValue.DateTimeFormat != null) {
                oldValue.DateTimeFormat = null;
            }
            if ($this.ApplicationLanguage.DateTimeFormat !== $this) {
                DSS4_ECompliance.BO.ApplicationLanguage.setDateTimeFormat(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationTheme  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationTheme";
    Domain = DSS4_ECompliance.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
Description:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class FileData  {
    _originalTypeClassName = "DSS4_ECompliance.BO.FileData";
    Domain = DSS4_ECompliance.BO;
    constructor() {
        this['_key'] = this.Id = "00000000-0000-0000-0000-000000000000";
    }
Id:
    any;
FileName:
    any;
FolderPath:
    any;
MaxFileSize:
    any;
AllowedExtensions:
    any;
Blob:
    any;
StorageMedium:
    any;
UploadedBy:
    any;
UploadDateTime:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == "00000000-0000-0000-0000-000000000000";
    }
}

export enum StorageMedium {
    FileSystem,
    DataBase,
}

export class AuditEntityConfiguration  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditEntityConfiguration";
    Domain = DSS4_ECompliance.BO;
    constructor() {
        this.Properties = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
FullName:
    any;
ShortName:
    any;
Properties:
    any;
    static setProperties = ($this, items) => {
        if (items == null) items = [];
        if ($this.Properties == null) $this.Properties = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Properties.length > 0) {
            DSS4_ECompliance.BO.AuditEntityConfiguration.removeProperties($this, $this.Properties[0]);
        }

        DSS4_ECompliance.BO.AuditEntityConfiguration.addManyProperties($this, copyItems);
    }
    static addManyProperties = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS4_ECompliance.BO.AuditEntityConfiguration.addProperties($this, items[i]);
        }
    }
    static addProperties = ($this, item) => {
        if ($this.Properties == null) $this.Properties = [];
        if (item == null || $this.Properties.indexOf(item) > -1) return;
        $this.Properties.push(item);
        if (item.Entity != $this) {
            DSS4_ECompliance.BO.AuditPropertyConfiguration.setEntity(item, $this);
        }
    }
    static addRangeProperties = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS4_ECompliance.BO.AuditEntityConfiguration.addProperties($this, item));
    }
    static removeProperties = ($this, item) => {
        if ($this == null || $this.Properties == null || $this.Properties.indexOf(item) === -1) return;
        var _index = $this.Properties.indexOf(item);
        $this.Properties.splice(_index, 1);
        item.Entity = null;
    }
    static clearProperties = ($this) => {
        $this.Properties = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AuditPropertyConfiguration  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditPropertyConfiguration";
    Domain = DSS4_ECompliance.BO;
    constructor() {
        this.Entity = new this.Domain.AuditEntityConfiguration();
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
DataType:
    any;
IsAuditable:
    any;
IsComplex:
    any;
IsCollection:
    any;
Entity:
    any;
    static setEntity = ($this, value) => {
        var oldValue = $this.Entity;
        $this.Entity = value;
        if (value != null) {
            if (oldValue != null) {
                DSS4_ECompliance.BO.AuditEntityConfiguration.removeProperties(oldValue, $this);
            }
            DSS4_ECompliance.BO.AuditEntityConfiguration.addProperties(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AuditLogEntry  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntry";
    Domain = DSS4_ECompliance.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
UserName:
    any;
IPAddress:
    any;
EntityFullName:
    any;
EntityShortName:
    any;
EntityId:
    any;
Timestamp:
    any;
EntryTypeId:
    any;
ActionTypeId:
    any;
OldValue:
    any;
NewValue:
    any;
PropertyName:
    any;
ExtraField1:
    any;
ExtraField2:
    any;
ExtraField3:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AuditLogEntryType  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntryType";
    Domain = DSS4_ECompliance.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Code:
    any;
Name:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AuditLogPropertyActionType  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditLogPropertyActionType";
    Domain = DSS4_ECompliance.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Code:
    any;
Name:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export enum WorkflowStatus {
    None,
    Completed,
    Pending,
    Expired,
    Cancelled,
    Failed,
    StepToContinueNotFound,
}

export class WorkflowExecutionResult  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Workflow.WorkflowExecutionResult";
    Domain = DSS4_ECompliance.BO;
    constructor() {
        this['_key'] = this.WorkflowExecutionResultKey = 0;
    }
Status:
    any;
Context:
    any;
WorkflowExecutionResultKey:
    any;
    static setContext = ($this, value) => {
        var oldValue = $this.Context;
        $this.Context = value;
        if (value != null) {
            if (oldValue != null && oldValue.Result != null) {
                oldValue.Result = null;
            }
            if ($this.Context.Result !== $this) {
                DSS4_ECompliance.BO.WorkflowContextBase.setResult(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.WorkflowExecutionResultKey == null || $this.WorkflowExecutionResultKey == 0;
    }
}

export class WorkflowContextBase  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Workflow.WorkflowContextBase";
    Domain = DSS4_ECompliance.BO;
    constructor() {
        this['_key'] = this.Id = "00000000-0000-0000-0000-000000000000";
    }
Name:
    any;
Error:
    any;
Expires:
    any;
ExpirationDateTime:
    any;
PendingSince:
    any;
PendingJobCreatedBy:
    any;
PendingStep:
    any;
Id:
    any;
Status:
    any;
Result:
    any;
    static setResult = ($this, value) => {
        var oldValue = $this.Result;
        $this.Result = value;
        if (value != null) {
            if (oldValue != null && oldValue.Context != null) {
                oldValue.Context = null;
            }
            if ($this.Result.Context !== $this) {
                DSS4_ECompliance.BO.WorkflowExecutionResult.setContext(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == "00000000-0000-0000-0000-000000000000";
    }
}

export class WorkflowSchedule  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Workflow.WorkflowSchedule";
    Domain = DSS4_ECompliance.BO;
    constructor() {
        this['_key'] = this.Workflow = "";
    }
Workflow:
    any;
Description:
    any;
StartDateTime:
    any;
ExpireOn:
    any;
CronExpression:
    any;
LastExecution:
    any;
LastExecutionMessage:
    any;
IsLastExecutionSuccess:
    any;
Active:
    any;
HumanReadableExpression:
    any;
NextExecutionTime:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Workflow == null || $this.Workflow == "";
    }
}

}
var _appDomain = DSS4_ECompliance.BO;
window.$domain = _appDomain;
